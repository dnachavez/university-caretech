generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  firstName         String
  lastName          String
  username          String             @unique
  email             String             @unique
  password          String
  role              String
  status            String             @default("UNVERIFIED")
  emailVerified     Boolean            @default(false)
  verificationToken String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  healthForm        StudentHealthForm?
  uploadedForms     UploadedForm[]
  appointments      Appointment[]
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  expires   DateTime
  createdAt DateTime @default(now())
}

model StudentHealthForm {
  id                   String   @id @default(cuid())
  userId               String   @unique
  lastName             String
  firstName            String
  middleInitial        String?
  birthdate            DateTime
  gender               String
  birthPlace           String
  addressLine1         String
  addressLine2         String?
  city                 String
  state                String
  postalCode           String
  guardianName         String
  guardianContact      String
  emergencyContact     String
  relationship         String
  emergencyNumber      String
  pastIllnesses        String?
  hospitalization      String?
  bloodType            String
  allergies            Boolean  @default(false)
  immunized            Boolean  @default(false)
  communicableDisease  Boolean  @default(false)
  asthmatic            Boolean  @default(false)
  chronicIllness       Boolean  @default(false)
  hiking               Boolean  @default(false)
  dancing              Boolean  @default(false)
  swimming             Boolean  @default(false)
  basketball           Boolean  @default(false)
  ballgames            Boolean  @default(false)
  jogging              Boolean  @default(false)
  football             Boolean  @default(false)
  badminton            Boolean  @default(false)
  calisthenics         Boolean  @default(false)
  wallclimbing         Boolean  @default(false)
  notFitActivities     String?
  medicationPermission Boolean  @default(false)
  signaturePath        String
  dateSigned           DateTime @default(now())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id])
}

model UploadedForm {
  id          String   @id @default(cuid())
  userId      String
  formType    String
  filePath    String
  notes       String?
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model ConsultationDate {
  id        String     @id @default(cuid())
  date      DateTime
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  timeSlots TimeSlot[]
}

model TimeSlot {
  id                String           @id @default(cuid())
  startTime         String
  endTime           String
  isAvailable       Boolean          @default(true)
  consultationDateId String
  consultationDate  ConsultationDate @relation(fields: [consultationDateId], references: [id], onDelete: Cascade)
  appointment       Appointment?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model Appointment {
  id             String   @id @default(cuid())
  userId         String
  timeSlotId     String   @unique
  consultationType String
  reasonForVisit String
  additionalNotes String?
  status         String   @default("SCHEDULED") // SCHEDULED, COMPLETED, CANCELLED
  user           User     @relation(fields: [userId], references: [id])
  timeSlot       TimeSlot @relation(fields: [timeSlotId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
